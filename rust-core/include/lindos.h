// Generated by cbindgen. Edit the Rust FFI surface instead of this file.


#ifndef LINDOS_H
#define LINDOS_H

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Result structure for FFI calls that need to return both success/failure and data
 */
typedef struct RustResult {
  bool success;
  char *data;
  int32_t error_code;
} RustResult;

/**
 * Process an inbound chat message and return a response owned by Rust.
 * Callers must free the returned string with `lindos_string_free` once done.
 *
 * # Safety
 * This function is safe to call from C/Swift as long as:
 * - The message pointer is either null or points to a valid null-terminated C string
 * - The returned pointer is freed exactly once using `lindos_string_free`
 */
char *lindos_process_message(const char *message);

/**
 * Enhanced version that returns structured results with error information.
 * Callers must free both data and error_message with `lindos_string_free`.
 *
 * # Safety
 * This function is safe to call from C/Swift as long as:
 * - The message pointer is either null or points to a valid null-terminated C string
 * - The returned RustResult's data pointer is freed exactly once using `lindos_string_free`
 */
struct RustResult lindos_process_message_safe(const char *message);

/**
 * Check if a message would be valid without processing it
 */
int32_t lindos_validate_message(const char *message);

/**
 * Get a human-readable error message for an error code
 */
char *lindos_error_message(int32_t error_code);

/**
 * Frees strings that originated from this library.
 *
 * # Safety
 * This function is safe to call as long as:
 * - The pointer was returned by a function from this library
 * - The pointer is freed exactly once
 * - The pointer is not used after being freed
 */
void lindos_string_free(char *ptr);

/**
 * Free a RustResult structure and its associated memory
 *
 * # Safety
 * This function is safe to call as long as:
 * - The result was returned by a function from this library
 * - The result is freed exactly once
 */
void lindos_result_free(struct RustResult result);

void lindos_set_debug(bool enabled);

#endif  /* LINDOS_H */
